name: Codebases deployment

on:
  push:
    branches:
      - dev
      - main
    paths:
      - 'apps/api/**'
      - '.github/**'


env:
  PROJECT_ID: '${{ secrets.GCLOUD_PROJECT_ID }}'
  REGION: europe-west1


jobs:
  build:
    name: Build JS
    timeout-minutes: 15
    runs-on: ubuntu-latest
    container: node:lts-slim
    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Cache Turbo
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-turbo-next-${{ hashFiles('**/yarn.lock') }}
          path: |
            **/.turbo/
            **/dist/
            !**/node_modules/**

      - name: Install dependencies
        run: |
          yarn install --immutable

      - name: Build
        run: yarn run build

      - name: Upload builds folders
        uses: actions/upload-artifact@v3
        with:
          name: builds
          path: |
            **/dist
            !**/node_modules/**

  api-docker-build:
    runs-on: ubuntu-latest
    name: API Docker
    needs: ['build']
    env:
      SERVICE: github-api
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'

      - name: Download JS build
        uses: actions/download-artifact@v3
        with:
          name: builds

      - name: Dependencies, turborepo and prune
        run: |
          npm i -g turbo@1.1.5
          yarn install --immutable
          turbo prune --scope=api --docker

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'

      - name: Configure docker
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |
          docker build --build-arg PKG_TARGET=tdlg-api --cache-from eu.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest -t eu.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest -f apps/api/Dockerfile .
          docker push eu.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest


  api-deploy:
    runs-on: ubuntu-latest
    name: API deploy
    needs: ['api-docker-build']
    env:
      SERVICE: github-api
    steps:
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCLOUD_SERVICE_KEY }}'
      - name: Deploy API to Cloud Run (Staging)
        if: endsWith(github.ref, '/dev')
        run: >
          gcloud run deploy --project ${{ env.PROJECT_ID }} ${{ env.SERVICE }}
          --concurrency 80 
          --region ${{ env.REGION }}
          --memory 1Gi
          --platform managed
          --set-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }}
          --allow-unauthenticated
          --timeout 40
          --image 'eu.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest'
          --set-env-vars STAGE=staging,NODE_ENV=production,INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }},DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }},DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }},DATABASE_NAME=${{ secrets.DATABASE_NAME_PRODUCTION }},DATABASE_HOST=/cloudsql/${{ secrets.INSTANCE_CONNECTION_NAME }},JWT_SECRET=${{ secrets.JWT_SECRET }},ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }},API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT_PRODUCTION  }},APP_KEYS=${{ secrets.APP_KEYS }},DATABASE_PORT=5432

      - name: Deploy API to Cloud Run (Production)
        if: endsWith(github.ref, '/master')  || endsWith(github.ref, '/main')
        run: >
          gcloud run deploy --project ${{ env.PROJECT_ID }} ${{ env.SERVICE }}
          --concurrency 80
          --region ${{ env.REGION }}
          --memory 1Gi
          --platform managed
          --set-cloudsql-instances ${{ secrets.INSTANCE_CONNECTION_NAME }}
          --allow-unauthenticated
          --timeout 40
          --image 'eu.gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:latest'
          --set-env-vars STAGE=production,NODE_ENV=production,INSTANCE_CONNECTION_NAME=${{ secrets.INSTANCE_CONNECTION_NAME }},DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }},DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }},DATABASE_NAME=${{ secrets.DATABASE_NAME_PRODUCTION }},DATABASE_HOST=/cloudsql/${{ secrets.INSTANCE_CONNECTION_NAME }},JWT_SECRET=${{ secrets.JWT_SECRET }},ADMIN_JWT_SECRET=${{ secrets.ADMIN_JWT_SECRET }},API_TOKEN_SALT=${{ secrets.API_TOKEN_SALT_PRODUCTION  }},APP_KEYS=${{ secrets.APP_KEYS }},DATABASE_PORT=5432

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}